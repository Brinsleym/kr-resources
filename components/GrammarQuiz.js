import { useState, useEffect } from 'react';
import Head from 'next/head';

export default function GrammarQuiz() {
  const [currentScreen, setCurrentScreen] = useState('start'); // 'start', 'quiz', 'results'
  const [currentQuiz, setCurrentQuiz] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [showFeedback, setShowFeedback] = useState(false);
  const [quizType, setQuizType] = useState('');

  const questionBanks = {
    possessive: [
      { q: "How do you formally say 'my bag'?", o: ["ÎÇòÏùò Í∞ÄÎ∞©", "Ï†ÄÏùò Í∞ÄÎ∞©"], a: "Ï†ÄÏùò Í∞ÄÎ∞©" },
      { q: "How do you casually say 'your phone'?", o: ["ÎÑàÏùò Ìï∏ÎìúÌè∞", "Ï†ÄÏùò Ìï∏ÎìúÌè∞"], a: "ÎÑàÏùò Ìï∏ÎìúÌè∞" },
      { q: "What is 'teacher's book'?", o: ["ÏÑ†ÏÉùÎãò Ï±Ö", "ÏÑ†ÏÉùÎãòÏùò Ï±Ö"], a: "ÏÑ†ÏÉùÎãòÏùò Ï±Ö" },
      { q: "How do you casually say 'our house'?", o: ["Ï†ÄÌù¨Ïùò Ïßë", "Ïö∞Î¶¨Ïùò Ïßë"], a: "Ïö∞Î¶¨Ïùò Ïßë" },
      { q: "How do you formally say 'our company'?", o: ["Ïö∞Î¶¨Ïùò ÌöåÏÇ¨", "Ï†ÄÌù¨Ïùò ÌöåÏÇ¨"], a: "Ï†ÄÌù¨Ïùò ÌöåÏÇ¨" },
      { q: "What is 'Korea's capital city'?", o: ["ÌïúÍµ≠Ïùò ÏàòÎèÑ", "ÌïúÍµ≠ ÏàòÎèÑ"], a: "ÌïúÍµ≠Ïùò ÏàòÎèÑ" },
      { q: "How do you say 'friend's name'?", o: ["ÏπúÍµ¨Ïùò Ïù¥Î¶Ñ", "ÎÇòÏùò Ïù¥Î¶Ñ"], a: "ÏπúÍµ¨Ïùò Ïù¥Î¶Ñ" },
      { q: "What is 'that person's car'?", o: ["Í∑∏ ÏÇ¨ÎûåÏùò Ï∞®", "Ïù¥ ÏÇ¨ÎûåÏùò Ï∞®"], a: "Í∑∏ ÏÇ¨ÎûåÏùò Ï∞®" },
      { q: "How do you formally say 'my parents'?", o: ["ÎÇòÏùò Î∂ÄÎ™®Îãò", "Ï†ÄÏùò Î∂ÄÎ™®Îãò"], a: "Ï†ÄÏùò Î∂ÄÎ™®Îãò" },
      { q: "What is 'my younger sibling's school'?", o: ["ÎèôÏÉùÏùò ÌïôÍµê", "ÌòïÏùò ÌïôÍµê"], a: "ÎèôÏÉùÏùò ÌïôÍµê" }
    ],
    connectors: [
      { q: "In a formal report, how do you connect 'book' (Ï±Ö) and 'notebook' (Í≥µÏ±Ö)?", o: ["Ï±ÖÍ≥º Í≥µÏ±Ö", "Ï±ÖÏôÄ Í≥µÏ±Ö", "Ï±ÖÌïòÍ≥† Í≥µÏ±Ö"], a: "Ï±ÖÍ≥º Í≥µÏ±Ö" },
      { q: "When talking to a friend, how do you say 'milk' (Ïö∞Ïú†) and 'bread' (Îπµ)?", o: ["Ïö∞Ïú†Îûë Îπµ", "Ïö∞Ïú†Ïù¥Îûë Îπµ", "Ïö∞Ïú†Í≥º Îπµ"], a: "Ïö∞Ïú†Ïù¥Îûë Îπµ" },
      { q: "In a formal presentation, how do you say 'apple' (ÏÇ¨Í≥º) and 'orange' (Ïò§Î†åÏßÄ)?", o: ["ÏÇ¨Í≥ºÏôÄ Ïò§Î†åÏßÄ", "ÏÇ¨Í≥ºÍ≥º Ïò§Î†åÏßÄ", "ÏÇ¨Í≥ºÎûë Ïò§Î†åÏßÄ"], a: "ÏÇ¨Í≥ºÏôÄ Ïò§Î†åÏßÄ" },
      { q: "Which particle is a safe, neutral choice for 'water' (Î¨º) and 'juice' (Ï£ºÏä§) in most situations?", o: ["Î¨ºÌïòÍ≥† Ï£ºÏä§", "Î¨ºÏù¥Îûë Ï£ºÏä§", "Î¨ºÍ≥º Ï£ºÏä§"], a: "Î¨ºÌïòÍ≥† Ï£ºÏä§" },
      { q: "You're casually telling a friend what you want. How do you say 'coffee' (Ïª§Ìîº) and 'cake' (ÏºÄÏù¥ÌÅ¨)?", o: ["Ïª§ÌîºÎûë ÏºÄÏù¥ÌÅ¨", "Ïª§ÌîºÏù¥Îûë ÏºÄÏù¥ÌÅ¨", "Ïª§ÌîºÏôÄ ÏºÄÏù¥ÌÅ¨"], a: "Ïª§ÌîºÎûë ÏºÄÏù¥ÌÅ¨" },
      { q: "When writing an email to your boss, how would you list 'computer' (Ïª¥Ìì®ÌÑ∞) and 'chair' (ÏùòÏûê)?", o: ["Ïª¥Ìì®ÌÑ∞ÏôÄ ÏùòÏûê", "Ïª¥Ìì®ÌÑ∞Í≥º ÏùòÏûê", "Ïª¥Ìì®ÌÑ∞ÌïòÍ≥† ÏùòÏûê"], a: "Ïª¥Ìì®ÌÑ∞ÏôÄ ÏùòÏûê" },
      { q: "You're speaking casually. How do you say 'bag' (Í∞ÄÎ∞©) and 'hat' (Î™®Ïûê)?", o: ["Í∞ÄÎ∞©Ïù¥Îûë Î™®Ïûê", "Í∞ÄÎ∞©Îûë Î™®Ïûê", "Í∞ÄÎ∞©Í≥º Î™®Ïûê"], a: "Í∞ÄÎ∞©Ïù¥Îûë Î™®Ïûê" },
      { q: "In a newspaper article, how would 'newspaper' (Ïã†Î¨∏) and 'magazine' (Ïû°ÏßÄ) be connected?", o: ["Ïã†Î¨∏Í≥º Ïû°ÏßÄ", "Ïã†Î¨∏ÏôÄ Ïû°ÏßÄ", "Ïã†Î¨∏ÌïòÍ≥† Ïû°ÏßÄ"], a: "Ïã†Î¨∏Í≥º Ïû°ÏßÄ" },
      { q: "You're chatting with a friend about your hobbies. How do you say 'movie' (ÏòÅÌôî) and 'drama' (ÎìúÎùºÎßà)?", o: ["ÏòÅÌôîÎûë ÎìúÎùºÎßà", "ÏòÅÌôîÏù¥Îûë ÎìúÎùºÎßà", "ÏòÅÌôîÏôÄ ÎìúÎùºÎßà"], a: "ÏòÅÌôîÎûë ÎìúÎùºÎßà" },
      { q: "How would you connect 'father' (ÏïÑÎ≤ÑÏßÄ) and 'mother' (Ïñ¥Î®∏Îãà) in a formal speech?", o: ["ÏïÑÎ≤ÑÏßÄÏôÄ Ïñ¥Î®∏Îãà", "ÏïÑÎ≤ÑÏßÄÎûë Ïñ¥Î®∏Îãà", "ÏïÑÎ≤ÑÏßÄÌïòÍ≥† Ïñ¥Î®∏Îãà"], a: "ÏïÑÎ≤ÑÏßÄÏôÄ Ïñ¥Î®∏Îãà" }
    ],
    titles: [
      { q: "How do you politely address a colleague named Ïù¥ÏßÄÏùÄ?", o: ["ÏßÄÏùÄ Ïî®", "ÏßÄÏùÄ Îãò"], a: "ÏßÄÏùÄ Ïî®" },
      { q: "You are speaking to a doctor. How do you refer to them?", o: ["ÏùòÏÇ¨ Ïî®", "ÏùòÏÇ¨ ÏÑ†ÏÉùÎãò"], a: "ÏùòÏÇ¨ ÏÑ†ÏÉùÎãò" },
      { q: "How do you address a customer named ÍπÄÏ≤†Ïàò?", o: ["Ï≤†Ïàò Ïî®", "Ï≤†Ïàò Îãò"], a: "Ï≤†Ïàò Îãò" },
      { q: "Which title is more honorific?", o: ["~Ïî®", "~Îãò"], a: "~Îãò" },
      { q: "You are talking to a new classmate, Park Seojun. What's a standard polite title?", o: ["ÏÑúÏ§Ä Ïî®", "ÏÑúÏ§Ä Îãò"], a: "ÏÑúÏ§Ä Ïî®" },
      { q: "How would a company announce an award for 'employee Kim Minjun'?", o: ["ÍπÄÎØºÏ§Ä Ïî®", "ÍπÄÎØºÏ§Ä Îãò"], a: "ÍπÄÎØºÏ§Ä Îãò" },
      { q: "What title is attached to job positions like 'ÏÇ¨Ïû•' (CEO)?", o: ["ÏÇ¨Ïû• Ïî®", "ÏÇ¨Ïû•Îãò"], a: "ÏÇ¨Ïû•Îãò" },
      { q: "When talking about a friend named 'Sujin' to another friend, you would say:", o: ["ÏàòÏßÑ Ïî®", "ÏàòÏßÑ"], a: "ÏàòÏßÑ" }
    ]
  };

  const shuffleArray = (array) => {
    return array.sort(() => Math.random() - 0.5);
  };

  const speak = (text) => {
    if (!text) return;
    try {
      const audio = new Audio(`/api/tts?text=${encodeURIComponent(text)}`);
      audio.volume = 0.8;
      audio.play().catch(error => {
        console.error('Error playing audio:', error);
        alert('Unable to play audio. Please check your connection.');
      });
    } catch (error) {
      console.error('Error creating audio:', error);
      alert('Audio not available.');
    }
  };

  const startQuiz = (type) => {
    const fullBank = questionBanks[type];
    setCurrentQuiz(shuffleArray([...fullBank]));
    setCurrentQuestionIndex(0);
    setScore(0);
    setQuizType(type);
    setCurrentScreen('quiz');
    setSelectedAnswer('');
    setShowFeedback(false);
  };

  const selectAnswer = (answer) => {
    setSelectedAnswer(answer);
    setShowFeedback(true);
    if (answer === currentQuestion.a) {
      setScore(score + 1);
    }
  };

  const nextQuestion = () => {
    if (currentQuestionIndex + 1 < currentQuiz.length) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setSelectedAnswer('');
      setShowFeedback(false);
    } else {
      setCurrentScreen('results');
    }
  };

  const restartQuiz = () => {
    setCurrentScreen('start');
    setSelectedAnswer('');
    setShowFeedback(false);
  };

  const currentQuestion = currentQuiz[currentQuestionIndex];

  const getQuizTitle = (type) => {
    const titles = {
      possessive: 'Possessive `~Ïùò`',
      connectors: 'Connectors for "And"',
      titles: 'Titles for Names'
    };
    return titles[type] || '';
  };

  return (
    <>
      <Head>
        <title>Korean Grammar Quiz | Interactive Learning</title>
        <meta name="description" content="Interactive Korean grammar quiz covering possessive particles, connectors, and formal titles. Practice Korean grammar with instant feedback." />
      </Head>
      
      <div className="w-full max-w-2xl mx-auto">
        <header className="text-center mb-6">
          <h1 className="text-3xl sm:text-4xl font-bold text-slate-900">
            <span className="font-emoji">üá∞üá∑</span> Korean Grammar Quiz
          </h1>
          <p className="mt-2 text-slate-600">
            {currentScreen === 'start' && 'Select a topic to start the quiz.'}
            {currentScreen === 'quiz' && `Testing your knowledge of ${getQuizTitle(quizType)}.`}
            {currentScreen === 'results' && 'Here are your results!'}
          </p>
        </header>

        <div className="min-h-[450px] bg-white p-6 sm:p-8 rounded-xl shadow-lg flex flex-col justify-center">
          
          {/* Start Screen */}
          {currentScreen === 'start' && (
            <div className="text-center space-y-4">
              <button 
                onClick={() => startQuiz('possessive')}
                className="w-full text-lg bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-4 px-6 rounded-lg shadow-md transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg"
              >
                Quiz 1: Possessive `~Ïùò`
              </button>
              <button 
                onClick={() => startQuiz('connectors')}
                className="w-full text-lg bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-4 px-6 rounded-lg shadow-md transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg"
              >
                Quiz 2: Connectors for "And"
              </button>
              <button 
                onClick={() => startQuiz('titles')}
                className="w-full text-lg bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-4 px-6 rounded-lg shadow-md transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg"
              >
                Quiz 3: Titles for Names
              </button>
            </div>
          )}

          {/* Quiz Screen */}
          {currentScreen === 'quiz' && currentQuestion && (
            <div>
              <div className="mb-4 text-right text-slate-500 font-semibold">
                Question {currentQuestionIndex + 1} / {currentQuiz.length}
              </div>
              <p className="font-semibold text-xl sm:text-2xl text-slate-800 mb-6 min-h-[64px]">
                {currentQuestion.q}
              </p>
              <div className="space-y-3">
                {shuffleArray([...currentQuestion.o]).map((option, index) => {
                  const isCorrect = option === currentQuestion.a;
                  const isSelected = option === selectedAnswer;
                  
                  let buttonClasses = "w-full text-left p-4 border-2 rounded-lg font-medium transition-all duration-200 ";
                  
                  if (showFeedback) {
                    if (isCorrect) {
                      buttonClasses += "bg-green-600 border-green-600 text-white ";
                    } else if (isSelected && !isCorrect) {
                      buttonClasses += "bg-red-600 border-red-600 text-white ";
                    } else {
                      buttonClasses += "border-slate-300 text-slate-400 opacity-70 cursor-not-allowed ";
                    }
                  } else {
                    buttonClasses += "border-slate-300 hover:bg-slate-100 hover:border-indigo-400 cursor-pointer ";
                  }

                  return (
                    <button
                      key={index}
                      onClick={() => !showFeedback && selectAnswer(option)}
                      disabled={showFeedback}
                      className={buttonClasses}
                    >
                      {option}
                    </button>
                  );
                })}
              </div>
              
              {showFeedback && (
                <div className="mt-4 min-h-[32px] text-center font-semibold flex items-center justify-center">
                  <span className={selectedAnswer === currentQuestion.a ? 'text-green-600' : 'text-red-600'}>
                    {selectedAnswer === currentQuestion.a 
                      ? <>Correct! (Ï†ïÎãµ!) <span className="font-emoji">üéâ</span></> 
                      : `Not quite. The answer is "${currentQuestion.a}".`
                    }
                  </span>
                  <button
                    onClick={() => speak(currentQuestion.a)}
                    className="ml-2 text-xl hover:text-indigo-600 transition-colors cursor-pointer font-emoji"
                    title="Listen to pronunciation"
                  >
                    üîä
                  </button>
                </div>
              )}
              
              {showFeedback && (
                <button
                  onClick={nextQuestion}
                  className="w-full mt-6 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-md transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg"
                >
                  {currentQuestionIndex + 1 < currentQuiz.length ? 'Next Question' : 'View Results'}
                </button>
              )}
            </div>
          )}

          {/* Results Screen */}
          {currentScreen === 'results' && (
            <div className="text-center">
              <h2 className="text-3xl font-bold text-slate-900 mb-4">Quiz Complete!</h2>
              <p className="text-xl text-slate-700 mb-2">Your score:</p>
              <p className="text-5xl font-bold text-indigo-600 mb-8">
                {score} / {currentQuiz.length}
              </p>
              <button
                onClick={restartQuiz}
                className="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-6 rounded-lg shadow-md transition-all duration-200 hover:-translate-y-0.5 hover:shadow-lg"
              >
                Back to Main Menu
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  );
}
